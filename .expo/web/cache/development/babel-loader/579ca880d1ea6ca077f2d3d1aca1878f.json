{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Task from \"./components/Task\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItems = _useState4[0],\n      setTaskItems = _useState4[1];\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(ScrollView, {\n      contentContainerStyle: {\n        flexGrow: 1\n      },\n      keyboardShouldPersistTaps: \"handled\",\n      children: _jsxs(View, {\n        style: styles.tasksWrapper,\n        children: [_jsx(Text, {\n          style: styles.sectionTitle,\n          children: \"Ediz's tasks\"\n        }), _jsx(View, {\n          style: styles.items,\n          children: taskItems.map(function (item, index) {\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return completeTask(index);\n              },\n              children: _jsx(Task, {\n                text: item\n              })\n            }, index);\n          })\n        })]\n      })\n    }), _jsxs(KeyboardAvoidingView, {\n      behavior: Platform.OS === \"ios\" ? \"padding\" : height,\n      style: styles.writeTaskWrapper,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: 'Click to write a task',\n        value: task,\n        onChangeText: function onChangeText(text) {\n          return setTask(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return handleAddTask();\n        },\n        children: _jsx(View, {\n          style: styles.addWrapper,\n          children: _jsx(Text, {\n            style: styles.addText,\n            children: \"Add\"\n          })\n        })\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED'\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#00bfff',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"names":["React","useState","Task","App","task","setTask","taskItems","setTaskItems","handleAddTask","Keyboard","dismiss","completeTask","index","itemsCopy","splice","styles","container","flexGrow","tasksWrapper","sectionTitle","items","map","item","Platform","OS","height","writeTaskWrapper","input","text","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth"],"sources":["D:/Programming/To Do List/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { KeyboardAvoidingView, StyleSheet, Text, View, TextInput, TouchableOpacity, Keyboard, ScrollView } from 'react-native';\nimport Task from './components/Task';\n\nexport default function App() {\n  const [task, setTask] = useState();\n  const [taskItems, setTaskItems] = useState([]);\n\n  const handleAddTask = () => {\n    Keyboard.dismiss();\n    setTaskItems([...taskItems, task])\n    setTask(null);\n  }\n\n  const completeTask = (index) => {\n    let itemsCopy = [...taskItems];\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy)\n  }\n\n  return (\n    <View style={styles.container}>\n\n      <ScrollView contentContainerStyle={{ flexGrow: 1 }} keyboardShouldPersistTaps='handled'>\n\n        <View style={styles.tasksWrapper}>\n          <Text style={styles.sectionTitle}>Ediz's tasks</Text>\n\n          <View style={styles.items}>\n            {\n              taskItems.map((item, index) => {\n                return (\n                  <TouchableOpacity key={index} onPress={() => completeTask(index)}>\n                    <Task text={item} />\n                  </TouchableOpacity>\n                )\n              })\n            }\n          </View>\n        </View>\n      </ScrollView>\n\n      <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"padding\" : height} style={styles.writeTaskWrapper}>\n        <TextInput style={styles.input} placeholder={'Click to write a task'} value={task} onChangeText={text => setTask(text)} />\n        <TouchableOpacity onPress={() => handleAddTask()}>\n          <View style={styles.addWrapper}>\n            <Text style={styles.addText}>Add</Text>\n          </View>\n        </TouchableOpacity>\n      </KeyboardAvoidingView>\n\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E8EAED',\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20,\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30,\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250,\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#00bfff',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n  },\n  addText: {},\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}